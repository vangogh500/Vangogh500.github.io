/* @flow */

/**
 * @module FluidMechanics
 * @file Fluid mechanic functions.
 * @author Kai Matsuda
 * @version 0.0.1
 */

/**
 * Calculates magnitude of drag force
 * @memberof module:FluidMechanics
 * @throws {Error} If any of the params are not of the correct type.
 * @param {number} cD Coefficient of drag.
 * @param {number} aF Frontal area.
 * @param {number} p Density of fluid/liquid.
 * @param {number} v Current velocity.
 * @return {number} Magnitude of force.
 */
export function drag(cD: number, aF: number, p: number, v: number): number {
  return -0.5 * p * cD * aF * Math.pow(v, 2)
}
/**
 * Calculate the magnitude of the force applied to the rudder
 * @memberof module:FluidMechanics
 * @throws {Error} If params are not of correct type.
 * @param {number} a Area of the rudder in m^2
 * @param {number} v Velocity in relation to the fluid m/s.
 * @param {number} p Density of the fluid.
 * @returns {number} Magnitude of the rudder force.
 */
export function rudder(a: number, v: number, p: number): number {
  return a * v * p
}

/**
 * Calculates the magnitude of the torque generated by the drag of the liquid.
 * Relates drag to a quadratic function of angular velocity. ax^2 + bx + c.
 * @memberof module:FluidMechanics
 * @throws {Error} If params are not of correct type.
 * @param {number} p0 c
 * @param {number} p1 b
 * @param {number} p2 a
 * @param {number} w The angular velocity in radians/sec.
 * @returns {number} Magnitude of the angular drag.
 */
export function angularDrag(p0: number, p1: number, p2: number, w: number): number {
  return -(p2 * Math.pow(w,2) + p1 * w + p0)
}
